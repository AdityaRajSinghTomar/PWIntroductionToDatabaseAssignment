Q1. What is a database. Explain with an example on why should we need a database.

Ans: A database is an organised collection of data, which would be in the form of words, numbers, images, videos, etc.
This database can be interacted with using a Database Management System.
Database allows data to be organised in a structure in a consistent manner, making it easy to access and manipulate.
It ensures the integrity of the data by enforcing rules on data, storage of that data, insertion, updation, deletion,
and creation of data.
Database is a must in various aspects where collection and organisation of data is necessary due to:

--Managing large amounts of data:
A database stores and manages a large amount of data on a daily basis. 
This would not be possible using any other tool such as a spreadsheet as they would simply not work.

--Accurate:
A database is pretty accurate as it has all sorts of build in constraints, checks etc. 
This means that the information available in a database is guaranteed to be correct in most cases.

--Easy to update data:
In a database, it is easy to update data using various Data Manipulation languages (DML) available. One of these 
languages is SQL.

--Security of data:
Databases have various methods to ensure security of data. There are user logins required before accessing a 
database and various access specifiers. These allow only authorised users to access the database.

--Data integrity:
This is ensured in databases by using various constraints for data. Data integrity in databases makes sure that 
the data is accurate and consistent in a database.

Example: 

--Healthcare:
Doctorsâ€™ offices and healthcare organizations store extensive amounts of patient data for easy accessibility. 
The databases behind this collection of information are massive, with complex data structures and security 
protecting sensitive data.


Q2. Write a short note on file based storage system. Explain the major challenges of a file based storage system?

Ans: File storage or file-based storage consists of data storage systems that manage data as files, using a hierarchy
of files, folders and subfolders. Data is stored together in a file, which is identified by a filename, extension and
path (/folder/subfolder/filename.ext). Extensions vary depending on the kind of data files contain.
(for instance: .png for images, .mp3 for music or .doc for documents).
Every file system comes with a unique set of characteristics that determine its usability and performance. These 
include file organisation, directory structure, access control, file attributes, performance, file backup and recovery, 
and scalability.

Features: 
+ Heirarchal structure that makes finding and managing files easy.
+ Simple interface to create, organize and delete files.
+ Simultaneous access to files.

The major challenges of file-based storage include:

--Data Redundancy: 
Data redundancy occurs when the same data is stored in multiple files or locations, resulting in inconsistencies and 
errors.

--Data Inconsistency: 
When data is stored in multiple files, it can become difficult to keep all the copies of the 
data in sync, resulting in inconsistencies.

--Limited Scalability: 
File-based storage systems are often not very scalable. As the amount of data in the system 
grows, it can become increasingly difficult to manage and maintain the system.

--Security: 
File-based storage systems are often less secure than database systems. In a file-based storage system, it can be 
difficult to control who has access to data and what they can do with it.

--Inefficient use of storage space: 
File-based systems can lead to inefficient use of storage space as files are duplicated or stored in multiple locations.

--Data Isolation: 
Data isolation refers to the fact that in a file-based storage system, data is often stored in separate files, which 
makes it difficult to access and share data across different applications or systems.


Q3. What is DBMS? What was the need for DBMS?

Ans: Database Management Systems (DBMS) are software systems used to store, retrieve, and run queries on data. A DBMS 
serves as an interface between an end-user and a database, allowing users to create, read, update, and delete data in 
the database.
A database management system (or DBMS) is essentially nothing more than a computerized data-keeping system. Users of 
the system are given facilities to perform several kinds of operations on such a system for either manipulation of the 
data in the database or the management of the database structure itself.

A DBMS is a necessity for managing databases due to: 

--Data Organization and Management:
DBMS allow data to be stored in a structured manner, which helps in easier access. A well-designed database schema 
enables faster access to information, reducing the time required to find relevant data. A DBMS also provides features 
like indexing and searching, which make it easier to locate specific data within the database.

--Data Security and Privacy:
DBMS provide a robust security framework that ensures the security, integrity, and availability of data. They offer 
authentication and authorization features that control access to the database.

--Data Integrity and Consistency:
Data integrity and consistency are crucial for any database. DBMS provide mechanisms that ensure the accuracy and 
consistency of data. These mechanisms include constraints, triggers, and stored procedures that enforce data integrity 
rules. DBMSs also provide features like transactions that ensure that data changes are atomic, consistent, isolated, 
and durable (ACID).

--Concurrent Data Access:
A DBMS provides a concurrent access mechanism that allows multiple users to access the same data simultaneously. DBMS
use locking mechanisms to ensure that multiple users can access the same data without causing conflicts or data corruption.

--Data Analysis and Reporting:
DBMS provide tools that enable data analysis and reporting. These tools allow organizations to extract useful insights
from their data, enabling better decision-making. DBMS support various data analysis techniques such as OLAP, data 
mining, and machine learning.

--Scalability and Flexibility:
DBMS provide scalability and flexibility, enabling handling increasing amounts of data. DBMS can be scaled horizontally 
by adding more servers or vertically by increasing the capacity of existing servers. DBMSs provide flexibility in terms 
of data modeling, enabling organizations to adapt their databases to changing business requirements.


Q4. Explain 5 challenges of file-based storage system which was tackled by DBMS?

Ans: 
Challenges of file-based storage system tackled by DBMS:

--Data Redundancy: 
File-based storage systems can have a piece of data stored separately at multiple locations in the memory, using up
memory unnecessarily. DBMS stores a piece of data only once at a fixed location.

--Data Inconsistency: 
File-based storage system can have a piece of data stored separately at multiple locations, meaning that each piece of 
data would need to be updated individually as are not in synchronization. DBMS makes sure such mistake does not happen.

--Data Integrity Consraints: 
Enforcing constraints on data in File-based storage systems require additional logic. DBMS allows definition of integrity 
constraints at schema level, such as primary keys, unique constraints, and foreign keys.

--Concurrency Control:
File-based storage systems struggle with handling concurrent access of data, and might render the data corrupt. DBMS ensures 
no such struggle occur using mechanisms such as transaction management, locking, etc.

--Scalability: For file-based storage systems, increasing number of data can affect performance severely, while DBMS 
uses querying of data that enhances scalability of the system, making it efficient and optimized to handle data.


Q5. List out the different types of classifications in DBMS and explain.

Ans: 
The different types of classifications in DBMS are:

--Centralized Database:
It is the type of database that stores data at a centralized database system. It comforts the users to access the stored 
data from different locations through several applications. These applications contain the authentication process to let 
users access data securely.

--Distributed Database:
Unlike a centralized database system, in distributed systems, data is distributed among different database systems of an 
organization. These database systems are connected via communication links. Such links help the end-users to access 
the data easily.

--Relational Database:
This database is based on the relational data model, which stores data in the form of rows(tuple) and columns(attributes), 
and together forms a table(relation). A relational database uses SQL for storing, manipulating, as well as maintaining
the data. E.F. Codd invented the database in 1970. Each table in the database carries a key that makes the data unique 
from others.

--NoSQL Database:
Non-SQL/Not Only SQL is a type of database that is used for storing a wide range of data sets. It is not a relational 
database as it stores data not only in tabular form but in several different ways. It came into existence when the 
demand for building modern applications increased. Thus, NoSQL presented a wide variety of database technologies in 
response to the demands.

--Cloud Database:
A type of database where data is stored in a virtual environment and executes over the cloud computing platform. 
It provides users with various cloud computing services (SaaS, PaaS, IaaS, etc.) for accessing the database.

--Object-Oriented Database: 
The type of database that uses the object-based data model approach for storing data in the database system. The data 
is represented and stored as objects which are similar to the objects used in the object-oriented programming language.

--Network Database: 
It is the database that typically follows the network data model. Here, the representation of data is in the form of 
nodes connected via links between them. Unlike the hierarchical database, it allows each record to have multiple 
children and parent nodes to form a generalized graph structure.


Q6. What is the significance of Data Modeling and explain the types of Data Modeling.

Ans: Data modeling is the process of analyzing and defining all the different data types your business collects and produces,
as well as the relationships between those bits of data. It is the process of creating a visual representation of 
an information system to communicate connections between data points and structures.

A comprehensive and optimised data model helps create a simplified, logical database that eliminates redundancy, reduces storage 
requirements, and enables efficient retrieval. Data modeling allows you to identify the possible relationships between different 
pieces of information, which will determine what type of queries can be run against that data. 

The importance of data modeling is as follows: 

--Organizes Data: 
Data modeling structures data in a logical and organized manner, making it easier to understand and manage.

--Improves Data Quality: 
Data modeling helps identify and rectify inconsistencies and errors in data, leading to better data quality.

--Ensures Data Integrity: 
Data modeling enforces constraints and relationships, ensuring data integrity and preventing data anomalies.

--Supports Decision Making: 
Well-designed data models provide valuable insights and support informed decision-making processes.

--Facilitates Database Design: 
Data modeling is a crucial step in database design, helping create efficient and optimized database structures.

There are different types of data models, including: 

--ER (Entity-Relationship) Model:
This model is based on the notion of real-world entities and relationships among them. It creates an entity set, 
relationship set, general attributes, and constraints.

--Hierarchical Model:
This data model arranges the data in the form of a tree with one root, to which other data is connected. The hierarchy
begins with the root and extends like a tree. This model effectively explains several real-time relationships with a 
single one-to-many relationship between two different kinds of data.

--Network Model:
This database model enables many-to-many relationships among the connected nodes. The data is arranged in a graph-like
structure, and here â€˜childâ€™ nodes can have multiple â€˜parentâ€™ nodes. The parent nodes are known as owners, and the 
child nodes are called members.

--Relational Model:
This popular data model example arranges the data into tables. The tables have columns and rows, each cataloging an 
attribute present in the entity. It makes relationships between data points easy to identify. 

--Object-Oriented Database Model:
This data model defines a database as an object collection, or recyclable software components, with related methods 
and features.


Q7. Explain 3 schema architecture along with its advantages.

Ans: The three schema architecture is also called ANSI/SPARC architecture or three-level architecture. Also called three-level 
architecture, it is used to separate the user applications and physical database. This architecture contains three-levels.

It breaks the database down into three different categories: 

--Internal Level: 
The internal level has an internal schema which describes the physical storage structure of the database. Also known as 
phsical level.

--Conceptual level: 
The conceptual schema describes the design of a database at the conceptual level. Conceptual level is 
also known as logical level.

--External level: 
At the external level, a database contains several schemas that sometimes called as subschema. The subschema is used 
to describe the different view of the database.

Advantages of Three Schema Architecture: 

--Data independence: 
When the logical and physical views are separate, changes to one view (especially physical) don't require changes to the 
other. For instance, changing the storage structure doesn't affect what users see.

--Flexibility: 
Users can see different views tailored to their needs, making the system more user-friendly and adaptable.

--Efficient data access: 
The separation allows for tailored optimizations. For example, while a DBA may optimize storage in the internal 
schema, developers can design efficient queries based on the logical schema.

--Improved security: 
Providing customized external views to users ensures that they access only the data they are authorized to see.